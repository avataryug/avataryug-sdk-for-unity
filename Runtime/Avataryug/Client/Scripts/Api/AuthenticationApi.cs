using System;
using RestSharp;
using Com.Avataryug.Model;
using Com.Avataryug.Client;
using System.Collections.Generic;
using UnityEngine;

namespace Com.Avataryug.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthenticationApi
    {
        /// <summary>
        /// Register User 
        /// </summary>
        /// <param name="registerUserRequest"></param>
        /// <returns>RegisterUserResponse</returns>
        void RegisterUser(RegisterUserRequest registerUserRequest, Action<RegisterUserResponse> result, Action<ApiException> error);

        /// <summary>
        /// Login With Android Device ID Signs the user in using the Android device identifier, returning a session identifier that can subsequently be used for API calls which require an authenticated user
        /// </summary>
        /// <param name="loginWithAndroidDeviceIDRequest"></param>
        /// <returns>LoginWithAndroidDeviceIDResult</returns>
        void LoginWithAndroidDeviceID(LoginWithAndroidDeviceIDRequest loginWithAndroidDeviceIDRequest, Action<LoginWithAndroidDeviceIDResult> result, Action<ApiException> error);

        /// <summary>
        /// Login With Apple Signs in the user with a Sign in with Apple identity token.
        /// </summary>
        /// <param name="loginWithAppleRequest"></param>
        /// <returns>LoginWithAppleResult</returns>
        void LoginWithApple(LoginWithAppleRequest loginWithAppleRequest, Action<LoginWithAppleResult> result, Action<ApiException> error);

        /// <summary>
        /// Login With Custom ID Signs the user in using a custom unique identifier generated by the Project, returning a session identifier that can subsequently be used for API calls which require an authenticated user
        /// </summary>
        /// <param name="loginWithCustomIDRequest"></param>
        /// <returns>LoginWithCustomIDResult</returns>
        void LoginWithCustomID(LoginWithCustomIDRequest loginWithCustomIDRequest, Action<LoginWithCustomIDResult> result, Action<ApiException> error);

        /// <summary>
        /// Login With Email Address Signs the user into the Avataryug account, returning a session identifier that can subsequently be used for API calls which require an authenticated user. Unlike most other login API calls, LoginWithEmailAddress does not permit the creation of new accounts via the CreateAccountFlag. E
        /// </summary>
        /// <param name="loginWithEmailAddressRequest"></param>
        /// <returns>LoginWithEmailAddressResult</returns>
        void LoginWithEmailAddress(LoginWithEmailAddressRequest loginWithEmailAddressRequest, Action<LoginWithEmailAddressResult> result, Action<ApiException> error);

        /// <summary>
        /// Login With Facebook Signs the user in using a Facebook access token, returning a session identifier that can subsequently be used for API calls which require an authenticated user
        /// </summary>
        /// <param name="loginWithFacebookRequest"></param>
        /// <returns>LoginWithFacebookResult</returns>
        void LoginWithFacebook(LoginWithFacebookRequest loginWithFacebookRequest, Action<LoginWithFacebookResult> result, Action<ApiException> error);

        /// <summary>
        /// Login With Google Account Signs the user in using their Google account credentials
        /// </summary>
        /// <param name="loginWithGoogleRequest"></param>
        /// <returns>LoginWithGoogleResult</returns>
        void LoginWithGoogle(LoginWithGoogleRequest loginWithGoogleRequest, Action<LoginWithGoogleResult> result, Action<ApiException> error);

        /// <summary>
        /// Login With IOS Device ID Signs the user in using the vendor-specific iOS device identifier, returning a session identifier that can subsequently be used for API calls which require an authenticated user
        /// </summary>
        /// <param name="loginWithIOSDeviceIDRequest"></param>
        /// <returns>LoginWithIOSDeviceIDResult</returns>
        void LoginWithIOSDeviceID(LoginWithIOSDeviceIDRequest loginWithIOSDeviceIDRequest, Action<LoginWithIOSDeviceIDResult> result, Action<ApiException> error);

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AuthenticationApi : IAuthenticationApi
    {

        /// <summary>
        /// Gets or sets the API client.
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class.
        /// </summary>
        /// <param name="apiClient"> an instance of ApiClient (optional)</param>
        /// <returns></returns>
        public AuthenticationApi(ApiClient apiClient = null)
        {
            if (apiClient == null) // use the default one in Configuration
                this.ApiClient = Configuration.DefaultApiClient;
            else
                this.ApiClient = apiClient;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthenticationApi(String basePath)
        {
            this.ApiClient = new ApiClient(basePath);
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <param name="basePath">The base path</param>
        /// <value>The base path</value>
        public void SetBasePath(String basePath)
        {
            this.ApiClient.BasePath = basePath;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <param name="basePath">The base path</param>
        /// <value>The base path</value>
        public String GetBasePath(String basePath)
        {
            return this.ApiClient.BasePath;
        }

        /// <summary>
        /// Login With Android Device ID Signs the user in using the Android device identifier, returning a session identifier that can subsequently be used for API calls which require an authenticated user
        /// </summary>
        /// <param name="loginWithAndroidDeviceIDRequest"></param>
        /// <returns>LoginWithAndroidDeviceIDResult</returns>
        public async void LoginWithAndroidDeviceID(LoginWithAndroidDeviceIDRequest loginWithAndroidDeviceIDRequest, Action<LoginWithAndroidDeviceIDResult> result, Action<ApiException> error)
        {
            if (!Configuration.ProjectIdPresent)
            {
                if (Configuration.avatarProjectSettings.DebugLog)
                {
                    Debug.LogError("ProjectId is not present");
                }
                ApiEvents.OnShowTextPopup?.Invoke(null, "Project Id is not set");
                return;
            }

            var path = "/LoginWithAndroidDeviceID";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            postBody = ApiClient.Serialize(loginWithAndroidDeviceIDRequest); // http body (model) parameter

            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LoginWithAndroidDeviceID: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LoginWithAndroidDeviceID: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }

            result?.Invoke((LoginWithAndroidDeviceIDResult)ApiClient.Deserialize(response.Content, typeof(LoginWithAndroidDeviceIDResult), response.Headers));

        }

        /// <summary>
        /// Login With Apple Signs in the user with a Sign in with Apple identity token.
        /// </summary>
        /// <param name="loginWithAppleRequest"></param>
        /// <returns>LoginWithAppleResult</returns>
        public async void LoginWithApple(LoginWithAppleRequest loginWithAppleRequest, Action<LoginWithAppleResult> result, Action<ApiException> error)
        {
            if (!Configuration.ProjectIdPresent)
            {
                if (Configuration.avatarProjectSettings.DebugLog)
                {
                    Debug.LogError("ProjectId is not present");
                }
                ApiEvents.OnShowTextPopup?.Invoke(null, "Project Id is not set");
                return;
            }

            var path = "/LoginWithApple";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            postBody = ApiClient.Serialize(loginWithAppleRequest); // http body (model) parameter

            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LoginWithApple: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LoginWithApple: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }

            result?.Invoke((LoginWithAppleResult)ApiClient.Deserialize(response.Content, typeof(LoginWithAppleResult), response.Headers));
        }

        /// <summary>
        /// Login With Custom ID Signs the user in using a custom unique identifier generated by the Project, returning a session identifier that can subsequently be used for API calls which require an authenticated user
        /// </summary>
        /// <param name="loginWithCustomIDRequest"></param>
        /// <returns>LoginWithCustomIDResult</returns>
        public async void LoginWithCustomID(LoginWithCustomIDRequest loginWithCustomIDRequest, Action<LoginWithCustomIDResult> result, Action<ApiException> error)
        {
            if (!Configuration.ProjectIdPresent)
            {
                if (Configuration.avatarProjectSettings.DebugLog)
                {
                    Debug.LogError("ProjectId is not present");
                }
                ApiEvents.OnShowTextPopup?.Invoke(null, "Project Id is not set");
                return;
            }

            var path = "/LoginWithCustomID";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            Debug.Log(">>>>>" + loginWithCustomIDRequest.ToJson());
            postBody = ApiClient.Serialize(loginWithCustomIDRequest); // http body (model) parameter

            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            var response = (IRestResponse)await ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
            // make the HTTP request
            //IRestResponse response = (IRestResponse)ApiClient.CallApiAsync(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);


            if (((int)response.StatusCode) >= 400)
            {

                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LoginWithCustomID: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LoginWithCustomID: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }

            result?.Invoke((LoginWithCustomIDResult)ApiClient.Deserialize(response.Content, typeof(LoginWithCustomIDResult), response.Headers));

        }

        /// <summary>
        /// Login With Email Address Signs the user into the Avataryug account, returning a session identifier that can subsequently be used for API calls which require an authenticated user. Unlike most other login API calls, LoginWithEmailAddress does not permit the creation of new accounts via the CreateAccountFlag. E
        /// </summary>
        /// <param name="loginWithEmailAddressRequest"></param>
        /// <returns>LoginWithEmailAddressResult</returns>
        public async void LoginWithEmailAddress(LoginWithEmailAddressRequest loginWithEmailAddressRequest, Action<LoginWithEmailAddressResult> result, Action<ApiException> error)
        {
            if (!Configuration.ProjectIdPresent)
            {
                if (Configuration.avatarProjectSettings.DebugLog)
                {
                    Debug.LogError("ProjectId is not present");
                }
                ApiEvents.OnShowTextPopup?.Invoke(null, "Project Id is not set");
                return;
            }


            var path = "/LoginWithEmailAddress";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            postBody = ApiClient.Serialize(loginWithEmailAddressRequest); // http body (model) parameter

            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (Configuration.avatarProjectSettings.DebugLog)
            {
                Debug.Log("Login" + response.Content);
            }
            if (((int)response.StatusCode) >= 400)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LoginWithEmailAddress: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LoginWithEmailAddress: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }

            result?.Invoke((LoginWithEmailAddressResult)ApiClient.Deserialize(response.Content, typeof(LoginWithEmailAddressResult), response.Headers));
        }

        /// <summary>
        /// Login With Facebook Signs the user in using a Facebook access token, returning a session identifier that can subsequently be used for API calls which require an authenticated user
        /// </summary>
        /// <param name="loginWithFacebookRequest"></param>
        /// <returns>LoginWithFacebookResult</returns>
        public async void LoginWithFacebook(LoginWithFacebookRequest loginWithFacebookRequest, Action<LoginWithFacebookResult> result, Action<ApiException> error)
        {
            if (!Configuration.ProjectIdPresent)
            {
                if (Configuration.avatarProjectSettings.DebugLog)
                {
                    Debug.LogError("ProjectId is not present");
                }
                ApiEvents.OnShowTextPopup?.Invoke(null, "Project Id is not set");
                return;
            }

            var path = "/LoginWithFacebook";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            postBody = ApiClient.Serialize(loginWithFacebookRequest); // http body (model) parameter

            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LoginWithFacebook: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LoginWithFacebook: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }
            result?.Invoke((LoginWithFacebookResult)ApiClient.Deserialize(response.Content, typeof(LoginWithFacebookResult), response.Headers));
        }

        /// <summary>
        /// Login With Google Account Signs the user in using their Google account credentials
        /// </summary>
        /// <param name="loginWithGoogleRequest"></param>
        /// <returns>LoginWithGoogleResult</returns>
        public async void LoginWithGoogle(LoginWithGoogleRequest loginWithGoogleRequest, Action<LoginWithGoogleResult> result, Action<ApiException> error)
        {
            if (!Configuration.ProjectIdPresent)
            {
                if (Configuration.avatarProjectSettings.DebugLog)
                {
                    Debug.LogError("ProjectId is not present");
                }
                ApiEvents.OnShowTextPopup?.Invoke(null, "Project Id is not set");
                return;
            }

            var path = "/LoginWithGoogle";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            postBody = ApiClient.Serialize(loginWithGoogleRequest); // http body (model) parameter

            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LoginWithGoogle: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LoginWithGoogle: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }
            result?.Invoke((LoginWithGoogleResult)ApiClient.Deserialize(response.Content, typeof(LoginWithGoogleResult), response.Headers));
        }

        /// <summary>
        /// Login With IOS Device ID Signs the user in using the vendor-specific iOS device identifier, returning a session identifier that can subsequently be used for API calls which require an authenticated user
        /// </summary>
        /// <param name="loginWithIOSDeviceIDRequest"></param>
        /// <returns>LoginWithIOSDeviceIDResult</returns>
        public async void LoginWithIOSDeviceID(LoginWithIOSDeviceIDRequest loginWithIOSDeviceIDRequest, Action<LoginWithIOSDeviceIDResult> result, Action<ApiException> error)
        {
            if (!Configuration.ProjectIdPresent)
            {
                if (Configuration.avatarProjectSettings.DebugLog)
                {
                    Debug.LogError("ProjectId is not present");
                }
                ApiEvents.OnShowTextPopup?.Invoke(null, "Project Id is not set");
                return;
            }

            var path = "/LoginWithIOSDeviceID";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            postBody = ApiClient.Serialize(loginWithIOSDeviceIDRequest); // http body (model) parameter

            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LoginWithIOSDeviceID: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling LoginWithIOSDeviceID: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }
            result?.Invoke((LoginWithIOSDeviceIDResult)ApiClient.Deserialize(response.Content, typeof(LoginWithIOSDeviceIDResult), response.Headers));
        }

        /// <summary>
        /// Register User 
        /// </summary>
        /// <param name="registerUserRequest"></param>
        /// <returns>RegisterUserResponse</returns>
        public async void RegisterUser(RegisterUserRequest registerUserRequest, Action<RegisterUserResponse> result, Action<ApiException> error)
        {
            if (!Configuration.ProjectIdPresent)
            {
                if (Configuration.avatarProjectSettings.DebugLog)
                {
                    Debug.LogError("ProjectId is not present");
                }
                ApiEvents.OnShowTextPopup?.Invoke(null, "Project Id is not set");
                return;
            }

            var path = "/RegisterUser";
            path = path.Replace("{format}", "json");

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            postBody = ApiClient.Serialize(registerUserRequest); // http body (model) parameter

            // authentication setting, if any
            String[] authSettings = new String[] { "bearerAuth" };

            // make the HTTP request
            IRestResponse response = (IRestResponse)await ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
            if (Configuration.avatarProjectSettings.DebugLog)
            {
                Debug.Log(response.Content);
            }
            if (((int)response.StatusCode) >= 400)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling RegisterUser: " + response.Content, response.Content));
                return;
            }
            else if (((int)response.StatusCode) == 0)
            {
                error?.Invoke(new ApiException((int)response.StatusCode, "Error calling RegisterUser: " + response.ErrorMessage, response.ErrorMessage));
                return;
            }

            result?.Invoke((RegisterUserResponse)ApiClient.Deserialize(response.Content, typeof(RegisterUserResponse), response.Headers));
        }
    }
}